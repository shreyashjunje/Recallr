
        <section className="bg-slate-50 rounded-3xl p-8 border border-slate-200">
          <div className="flex items-center justify-between mb-8">
            <div className="flex items-center gap-4">
              <h3 className="text-2xl font-bold text-slate-800 flex items-center gap-3">
                <Clock className="w-6 h-6 text-blue-500" />
                Recent Flashcard Sets
              </h3>
              {totalFlashcards > 0 && (
                <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
                  {totalFlashcards} total cards
                </div>
              )}
            </div>
            {flashcards.length === 0 && (
              <button
                onClick={loadSampleData}
                className="text-blue-500 hover:text-blue-700 text-sm font-medium transition-colors"
              >
                Load Sample Data
              </button>
            )}
          </div>

          {/* Search and Filter Bar */}
          {flashcards.length > 0 && (
            <div className="mb-8 space-y-4">
              {/* Search Bar */}
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
                <input
                  type="text"
                  placeholder="Search flashcards..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-12 pr-4 py-3 rounded-xl border border-slate-200 focus:border-blue-300 focus:ring-2 focus:ring-blue-100 transition-all duration-200"
                />
              </div>

              {/* Filter Toggle */}
              <div className="flex items-center justify-between">
                <button
                  onClick={() => setShowFilters(!showFilters)}
                  className="flex items-center gap-2 text-slate-600 hover:text-blue-600 transition-colors"
                >
                  <Filter className="w-4 h-4" />
                  Filters
                  {activeFilters > 0 && (
                    <span className="bg-blue-500 text-white text-xs px-2 py-1 rounded-full">
                      {activeFilters}
                    </span>
                  )}
                  <ChevronDown
                    className={`w-4 h-4 transition-transform ${
                      showFilters ? "rotate-180" : ""
                    }`}
                  />
                </button>

                {activeFilters > 0 && (
                  <button
                    onClick={clearFilters}
                    className="text-sm text-slate-500 hover:text-slate-700 flex items-center gap-1"
                  >
                    <X className="w-3 h-3" />
                    Clear filters
                  </button>
                )}
              </div>

              {/* Filter Controls */}
              {showFilters && (
                <div className="grid md:grid-cols-3 gap-4 p-4 bg-white rounded-xl border border-slate-200">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Category
                    </label>
                    <select
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      className="w-full p-2 border border-slate-200 rounded-lg focus:border-blue-300 focus:ring-1 focus:ring-blue-100"
                    >
                      {categories.map((category) => (
                        <option key={category} value={category}>
                          {category}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Difficulty
                    </label>
                    <select
                      value={selectedDifficulty}
                      onChange={(e) => setSelectedDifficulty(e.target.value)}
                      className="w-full p-2 border border-slate-200 rounded-lg focus:border-blue-300 focus:ring-1 focus:ring-blue-100"
                    >
                      {difficulties.map((difficulty) => (
                        <option key={difficulty} value={difficulty}>
                          {difficulty}
                        </option>
                      ))}
                    </select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Question Type
                    </label>
                    <select
                      value={selectedType}
                      onChange={(e) => setSelectedType(e.target.value)}
                      className="w-full p-2 border border-slate-200 rounded-lg focus:border-blue-300 focus:ring-1 focus:ring-blue-100"
                    >
                      {types.map((type) => (
                        <option key={type} value={type}>
                          {type}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              )}
            </div>
          )}

          {flashcards.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-16 h-16 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <BookOpen className="w-8 h-8 text-slate-400" />
              </div>
              <h4 className="text-xl font-medium text-slate-500 mb-2">
                No flashcards yet
              </h4>
              <p className="text-slate-500">
                Create your first set to get started with smart learning
              </p>
            </div>
          ) : filteredFlashcards.length === 0 ? (
            <div className="text-center py-16">
              <div className="w-16 h-16 bg-slate-200 rounded-full flex items-center justify-center mx-auto mb-4">
                <Search className="w-8 h-8 text-slate-400" />
              </div>
              <h4 className="text-xl font-medium text-slate-500 mb-2">
                No matching flashcards
              </h4>
              <p className="text-slate-500">
                Try adjusting your search or filter criteria
              </p>
            </div>
          ) : (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredFlashcards.map((card, index) => (
                <div
                  key={card.id}
                  className="bg-white rounded-xl p-6 border border-slate-200 hover:border-blue-300 transition-all duration-300 hover:transform hover:-translate-y-1 cursor-pointer group shadow-sm hover:shadow-md"
                  style={{
                    animationDelay: `${index * 100}ms`,
                    animation: "fadeInUp 0.5s ease-out forwards",
                  }}
                >
                  {/* Card Header */}
                  <div className="flex items-start justify-between mb-4">
                    <div className={`w-3 h-3 ${card.color} rounded-full`}></div>
                    <div className="flex items-center gap-2">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          toggleStar(card.id);
                        }}
                        className="text-slate-300 hover:text-yellow-400 transition-colors"
                      >
                        <Star
                          className={`w-4 h-4 ${
                            card.starred
                              ? "fill-yellow-400 text-yellow-400"
                              : ""
                          }`}
                        />
                      </button>
                      <span className="text-xs text-slate-500 bg-slate-100 px-2 py-1 rounded-full">
                        {card.count} cards
                      </span>
                    </div>
                  </div>

                  {/* Card Content */}
                  <h4 className="text-lg font-semibold text-slate-800 mb-2 group-hover:text-blue-600 transition-colors">
                    {card.title}
                  </h4>

                  <p className="text-sm text-slate-600 mb-4 line-clamp-2">
                    {card.description}
                  </p>

                  {/* Progress Bar */}
                  <div className="mb-4">
                    <div className="flex justify-between text-xs text-slate-500 mb-1">
                      <span>Progress</span>
                      <span>{card.progress}%</span>
                    </div>
                    <div className="w-full bg-slate-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full ${card.color} transition-all duration-300`}
                        style={{ width: `${card.progress}%` }}
                      ></div>
                    </div>
                  </div>

                  {/* Tags */}
                  <div className="flex flex-wrap gap-1 mb-4">
                    <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                      {card.category}
                    </span>
                    <span
                      className={`text-xs px-2 py-1 rounded-full ${
                        card.difficulty === "Beginner"
                          ? "bg-green-100 text-green-800"
                          : card.difficulty === "Intermediate"
                          ? "bg-yellow-100 text-yellow-800"
                          : "bg-red-100 text-red-800"
                      }`}
                    >
                      {card.difficulty}
                    </span>
                    <span className="text-xs bg-purple-100 text-purple-800 px-2 py-1 rounded-full">
                      {card.type}
                    </span>
                  </div>

                  {/* Card Footer */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-1 text-xs text-slate-500">
                      <Calendar className="w-3 h-3" />
                      <span>{card.date}</span>
                    </div>
                    <button className="bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex items-center gap-2 opacity-0 group-hover:opacity-100 transform translate-y-2 group-hover:translate-y-0">
                      <Play className="w-3 h-3" />
                      Study
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </section>






import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, RotateCcw, Clock, Tag, BookOpen, Target, Check } from 'lucide-react';

const FlashcardPlatform = () => {
  // Sample data - replace with your actual flashcards
  const [flashcardsData] = useState({
    title: "Advanced JavaScript Concepts",
    category: "Programming",
    tags: ["JavaScript", "Web Development", "ES6", "Async"],
    generatedAt: "2024-08-24T10:30:00Z",
    flashcards: [
      {
        question: "What is the difference between let, const, and var in JavaScript?",
        answer: "var is function-scoped and can be redeclared, let is block-scoped and can be reassigned, const is block-scoped and cannot be reassigned after declaration.",
        difficulty: "Medium"
      },
      {
        question: "Explain the concept of closure in JavaScript.",
        answer: "A closure is a function that has access to variables in its outer (enclosing) scope even after the outer function has returned. It gives you access to an outer function's scope from an inner function.",
        difficulty: "Hard"
      },
      {
        question: "What is the purpose of async/await in JavaScript?",
        answer: "Async/await is syntactic sugar built on top of promises that makes asynchronous code look and behave more like synchronous code, making it easier to read and write.",
        difficulty: "Easy"
      },
      {
        question: "What is event bubbling and event capturing?",
        answer: "Event bubbling is when an event starts from the target element and bubbles up to parent elements. Event capturing is the opposite - it starts from the root and goes down to the target element.",
        difficulty: "Medium"
      }
    ]
  });

  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [completedCards, setCompletedCards] = useState(new Set());
  const [showStats, setShowStats] = useState(false);

  const currentCard = flashcardsData.flashcards[currentCardIndex];
  
  const nextCard = () => {
    if (currentCardIndex < flashcardsData.flashcards.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1);
      setIsFlipped(false);
    }
  };

  const prevCard = () => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(currentCardIndex - 1);
      setIsFlipped(false);
    }
  };

  const flipCard = () => {
    setIsFlipped(!isFlipped);
  };

  const markAsCompleted = () => {
    setCompletedCards(new Set([...completedCards, currentCardIndex]));
    setTimeout(nextCard, 500);
  };

  const getDifficultyColor = (difficulty) => {
    switch (difficulty.toLowerCase()) {
      case 'easy': return 'from-green-400 to-green-600';
      case 'medium': return 'from-yellow-400 to-orange-500';
      case 'hard': return 'from-red-400 to-red-600';
      default: return 'from-gray-400 to-gray-600';
    }
  };

  const getDifficultyBadgeColor = (difficulty) => {
    switch (difficulty.toLowerCase()) {
      case 'easy': return 'bg-green-100 text-green-800 border-green-200';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'hard': return 'bg-red-100 text-red-800 border-red-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const progress = ((currentCardIndex + 1) / flashcardsData.flashcards.length) * 100;
  const completionRate = (completedCards.size / flashcardsData.flashcards.length) * 100;

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50">
      {/* Header Section */}
      <div className="relative overflow-hidden bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 text-white">
        <div className="absolute inset-0 bg-black/10"></div>
        <div className="relative max-w-6xl mx-auto px-6 py-12">
          <div className="text-center mb-8">
            <div className="inline-flex items-center gap-2 bg-white/20 backdrop-blur-sm rounded-full px-4 py-2 mb-4">
              <BookOpen className="w-5 h-5" />
              <span className="text-sm font-medium">Flashcard Study Session</span>
            </div>
            <h1 className="text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-white to-purple-100 bg-clip-text text-transparent">
              {flashcardsData.title}
            </h1>
            <p className="text-xl text-purple-100 mb-6">Master your knowledge with interactive learning</p>
          </div>

          {/* Metadata Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-2">
                <Target className="w-6 h-6 text-purple-200" />
                <span className="text-purple-200 text-sm font-medium">Category</span>
              </div>
              <p className="text-white text-lg font-semibold">{flashcardsData.category}</p>
            </div>

            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-2">
                <Tag className="w-6 h-6 text-purple-200" />
                <span className="text-purple-200 text-sm font-medium">Tags</span>
              </div>
              <div className="flex flex-wrap gap-2">
                {flashcardsData.tags.slice(0, 2).map((tag, index) => (
                  <span key={index} className="bg-white/20 text-white px-3 py-1 rounded-full text-sm">
                    {tag}
                  </span>
                ))}
                {flashcardsData.tags.length > 2 && (
                  <span className="text-purple-200 text-sm">+{flashcardsData.tags.length - 2} more</span>
                )}
              </div>
            </div>

            <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
              <div className="flex items-center gap-3 mb-2">
                <Clock className="w-6 h-6 text-purple-200" />
                <span className="text-purple-200 text-sm font-medium">Generated</span>
              </div>
              <p className="text-white text-sm">{formatDate(flashcardsData.generatedAt)}</p>
            </div>
          </div>

          {/* Progress Section */}
          <div className="bg-white/10 backdrop-blur-sm rounded-2xl p-6 border border-white/20">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-white font-semibold">Study Progress</h3>
              <button
                onClick={() => setShowStats(!showStats)}
                className="text-purple-200 hover:text-white transition-colors"
              >
                {showStats ? 'Hide Stats' : 'Show Stats'}
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <div className="flex justify-between text-sm text-purple-200 mb-2">
                  <span>Card {currentCardIndex + 1} of {flashcardsData.flashcards.length}</span>
                  <span>{Math.round(progress)}%</span>
                </div>
                <div className="w-full bg-white/20 rounded-full h-3">
                  <div 
                    className="bg-gradient-to-r from-pink-400 to-purple-400 h-3 rounded-full transition-all duration-500 ease-out"
                    style={{ width: `${progress}%` }}
                  ></div>
                </div>
              </div>

              {showStats && (
                <div className="grid grid-cols-2 gap-4 pt-4 border-t border-white/20">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">{completedCards.size}</div>
                    <div className="text-sm text-purple-200">Completed</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-white">{Math.round(completionRate)}%</div>
                    <div className="text-sm text-purple-200">Success Rate</div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Flashcard Section */}
      <div className="max-w-4xl mx-auto px-6 py-12">
        <div className="relative">
          {/* Flashcard Container */}
          <div className="perspective-1000 mb-8">
            <div 
              className={`relative w-full h-96 md:h-[500px] transition-transform duration-700 transform-style-preserve-3d cursor-pointer ${
                isFlipped ? 'rotate-y-180' : ''
              }`}
              onClick={flipCard}
            >
              {/* Front Side (Question) */}
              <div className="absolute inset-0 w-full h-full backface-hidden">
                <div className={`w-full h-full bg-gradient-to-br ${getDifficultyColor(currentCard.difficulty)} rounded-3xl shadow-2xl p-8 flex flex-col justify-between overflow-hidden relative`}>
                  <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16"></div>
                  <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full translate-y-12 -translate-x-12"></div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-6">
                      <div className={`px-4 py-2 rounded-full border ${getDifficultyBadgeColor(currentCard.difficulty)}`}>
                        <span className="text-sm font-semibold">{currentCard.difficulty}</span>
                      </div>
                      <div className="text-white/80 text-sm">
                        {currentCardIndex + 1} / {flashcardsData.flashcards.length}
                      </div>
                    </div>
                    <h2 className="text-2xl md:text-3xl font-bold text-white mb-4">Question</h2>
                    <p className="text-xl md:text-2xl text-white leading-relaxed">{currentCard.question}</p>
                  </div>
                  
                  <div className="text-center">
                    <div className="inline-flex items-center gap-2 text-white/80 text-sm bg-white/20 rounded-full px-4 py-2">
                      <RotateCcw className="w-4 h-4" />
                      Click to reveal answer
                    </div>
                  </div>
                </div>
              </div>

              {/* Back Side (Answer) */}
              <div className="absolute inset-0 w-full h-full backface-hidden rotate-y-180">
                <div className="w-full h-full bg-gradient-to-br from-emerald-500 to-teal-600 rounded-3xl shadow-2xl p-8 flex flex-col justify-between overflow-hidden relative">
                  <div className="absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -translate-y-16 translate-x-16"></div>
                  <div className="absolute bottom-0 left-0 w-24 h-24 bg-white/10 rounded-full translate-y-12 -translate-x-12"></div>
                  
                  <div>
                    <div className="flex items-center justify-between mb-6">
                      <div className="px-4 py-2 rounded-full bg-white/20 border border-white/30">
                        <span className="text-sm font-semibold text-white">Answer</span>
                      </div>
                      {completedCards.has(currentCardIndex) && (
                        <div className="flex items-center gap-2 text-white">
                          <Check className="w-5 h-5" />
                          <span className="text-sm">Completed</span>
                        </div>
                      )}
                    </div>
                    <p className="text-xl md:text-2xl text-white leading-relaxed">{currentCard.answer}</p>
                  </div>

                  <div className="flex gap-4 justify-center">
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        markAsCompleted();
                      }}
                      className="bg-white/20 hover:bg-white/30 text-white font-semibold py-3 px-6 rounded-2xl transition-all duration-300 flex items-center gap-2 backdrop-blur-sm border border-white/30"
                      disabled={completedCards.has(currentCardIndex)}
                    >
                      <Check className="w-5 h-5" />
                      {completedCards.has(currentCardIndex) ? 'Completed' : 'Mark as Known'}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Navigation Controls */}
          <div className="flex items-center justify-between">
            <button
              onClick={prevCard}
              disabled={currentCardIndex === 0}
              className="flex items-center gap-2 bg-white hover:bg-gray-50 disabled:bg-gray-100 disabled:text-gray-400 text-gray-700 font-semibold py-3 px-6 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:shadow-sm"
            >
              <ChevronLeft className="w-5 h-5" />
              Previous
            </button>

            <div className="flex gap-2">
              {flashcardsData.flashcards.map((_, index) => (
                <button
                  key={index}
                  onClick={() => {
                    setCurrentCardIndex(index);
                    setIsFlipped(false);
                  }}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    index === currentCardIndex
                      ? 'bg-indigo-600 scale-125'
                      : completedCards.has(index)
                      ? 'bg-green-400'
                      : 'bg-gray-300 hover:bg-gray-400'
                  }`}
                />
              ))}
            </div>

            <button
              onClick={nextCard}
              disabled={currentCardIndex === flashcardsData.flashcards.length - 1}
              className="flex items-center gap-2 bg-indigo-600 hover:bg-indigo-700 disabled:bg-gray-100 disabled:text-gray-400 text-white font-semibold py-3 px-6 rounded-2xl transition-all duration-300 shadow-lg hover:shadow-xl disabled:shadow-sm"
            >
              Next
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>

          {/* Completion Message */}
          {currentCardIndex === flashcardsData.flashcards.length - 1 && completedCards.has(currentCardIndex) && (
            <div className="mt-8 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-2xl p-8 text-center">
              <div className="inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-4">
                <Check className="w-8 h-8 text-green-600" />
              </div>
              <h3 className="text-2xl font-bold text-green-800 mb-2">Congratulations! 🎉</h3>
              <p className="text-green-700">You've completed all flashcards in this set!</p>
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        .perspective-1000 {
          perspective: 1000px;
        }
        .transform-style-preserve-3d {
          transform-style: preserve-3d;
        }
        .backface-hidden {
          backface-visibility: hidden;
        }
        .rotate-y-180 {
          transform: rotateY(180deg);
        }
      `}</style>
    </div>
  );
};

export default FlashcardPlatform;